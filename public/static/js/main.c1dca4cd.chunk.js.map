{"version":3,"sources":["redux/UserDuck.js","components/home/authForm.js","components/home/navbar.js","components/home/home.js","Routes.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["axios","defaults","withCredentials","LOADING","LOGIN_SUCCESS","LOGIN_ERROR","LOGOUT_SUCCESS","initialState","data","JSON","parse","localStorage","getItem","status","error","undefined","login","credentials","dispatch","type","post","then","res","user","setItem","stringify","payload","catch","response","logout","removeItem","AuthForm","useDispatch","useState","setCredentials","handleChange","e","key","target","name","value","prevState","className","uk-grid","src","alt","uk-cover","onSubmit","preventDefault","uk-icon","onChange","Navbar","uk-navbar","href","uk-navbar-toggle-icon","uk-dropdown","width","uk-img","onClick","class","Home","useSelector","state","Routes","exact","path","component","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","UIkit","use","Icons","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.c1dca4cd.chunk.js","sourcesContent":["import axios from \"axios\";\naxios.defaults.withCredentials = true;\n\n//Action types\nconst LOADING = \"cleanvel/user/LOADING\";\nconst LOGIN_SUCCESS = \"cleanvel/user/LOGIN_SUCCESS\";\nconst LOGIN_ERROR = \"cleanvel/user/LOGIN_ERROR\";\nconst LOGOUT_SUCCESS = \"cleanvel/user/LOGOUT_SUCCESS\";\n\nconst initialState = {\n    data: JSON.parse(localStorage.getItem(\"user\")),\n    status: \"\",\n    error: undefined,\n};\n\n\n//Reucer\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case LOADING:\n            return { ...state, status: \"pending\" };\n        case LOGIN_SUCCESS:\n            return { status: \"success\", data: { ...action.payload } };\n        case LOGIN_ERROR:\n            return { status: \"error\", error: action.error };\n        case LOGOUT_SUCCESS:\n            return initialState;\n        default:\n            return state;\n    }\n}\n\n\n//Action creators\nexport const loadingUser = () => ({\n    type: LOADING,\n});\n\nexport const loginSuccess = (payload) => ({\n    type: LOGIN_SUCCESS,\n    payload,\n});\n\nexport const loginError = (error) => ({\n    type: LOGIN_ERROR,\n    error,\n});\n\nexport const logoutSuccess = () => ({\n    type: LOGOUT_SUCCESS,\n});\n\n\n//login thunk\nexport const login = (credentials) => (dispatch) => {\n    dispatch(loadingUser());\n    return axios\n        .post(\"http://localhost:3000/login\", credentials)\n        .then((res) => {\n            const user = res.data.user;\n            localStorage.setItem(\"user\", JSON.stringify(user));\n            dispatch(loginSuccess(user));\n        })\n        .catch((res) => dispatch(loginError(res.response.data)));\n};\n\n//logout thunk\nexport const logout = () => (dispatch) => {\n    return axios\n        .post(\"http://localhost:3000/logout\")\n        .then(() => {\n            localStorage.removeItem(\"user\");\n            dispatch(logoutSuccess());\n        });\n};\n\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { login } from \"../../redux/UserDuck\";\n\nconst AuthForm = () => {\n    const dispatch = useDispatch();\n    const [credentials, setCredentials] = useState({});\n\n    const handleChange = (e) => {\n        const key = e.target.name;\n        const value = e.target.value;\n        setCredentials((prevState) => ({ ...prevState, [key]: value }));\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        dispatch(login(credentials));\n    };\n\n    return (\n        <div className=\"authform\">\n            <div className=\"uk-card uk-card-default uk-grid-collapse uk-child-width-1-2@s uk-margin uk-width-2xlarge\" uk-grid=\"true\">\n                <div className=\"uk-card-media-left uk-cover-container\">\n                    <img src=\"/images/cleanvel-login.jpeg\" alt=\"\" uk-cover=\"true\" />\n                </div>\n                <div className=\"uk-card-body\">\n                    <form onSubmit={handleSubmit}>\n                        <div>\n                            <img src=\"/images/cleanvel-logo.png\" alt=\"\" />\n                        </div>\n                        <div className=\"uk-margin\">\n                            <div className=\"uk-inline\">\n                                <span className=\"uk-form-icon\" uk-icon=\"icon: user\"></span>\n                                <input\n                                    className=\"uk-input\"\n                                    onChange={handleChange}\n                                    name=\"username\"\n                                    type=\"text\"\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"uk-margin\">\n                            <div className=\"uk-inline\">\n                                <span className=\"uk-form-icon uk-form-icon-flip\" uk-icon=\"icon: lock\"></span>\n                                <input\n                                    className=\"uk-input\"\n                                    onChange={handleChange}\n                                    name=\"password\"\n                                    type=\"password\"\n                                />\n                            </div>\n                        </div>\n                        <button className=\"uk-button uk-button-default\">Login</button>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default AuthForm;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { logout } from \"../../redux/UserDuck\";\n\nconst Navbar = (user) => {\n    const dispatch = useDispatch();\n\n    const handleLogout = () => {\n        dispatch(logout());\n    };\n\n    return (\n        <nav className=\"uk-navbar uk-navbar-container\" uk-navbar=\"true\">\n\n            <div className=\"uk-navbar-left uk-margin-left\">\n                <div>\n                    <a className=\"uk-navbar-toggle\" href=\"#\">\n                        <span uk-navbar-toggle-icon=\"true\"></span>\n                    </a>\n                    <div uk-dropdown=\"mode: click\">\n                        <ul className=\"uk-nav uk-dropdown-nav\">\n                            <li className=\"uk-active nav-name-text\">\n                                <a className=\"uk-text-capitalize\" href=\"#\">\n                                    <span className=\"uk-margin-small-right\" uk-icon=\"users\"></span>\n                                    <span className=\"nav-name-text\">Usuarios</span>\n                                </a>\n                            </li>\n                            <li className=\"uk-active nav-name-text\">\n                                <a className=\"uk-text-capitalize\" href=\"#\">\n                                    <span className=\"uk-margin-small-right\" uk-icon=\"location\"></span>\n                                    <span className=\"nav-name-text\">Tiendas</span>\n                                </a>\n                            </li>\n                            <li className=\"uk-active nav-name-text\">\n                                <a className=\"uk-text-capitalize\" href=\"#\">\n                                    <span className=\"uk-margin-small-right\" uk-icon=\"list\"></span>\n                                    <span className=\"nav-name-text\">Inventario</span>\n                                </a>\n                            </li>\n                            <li className=\"uk-active nav-name-text\">\n                                <a className=\"uk-text-capitalize\" href=\"#\">\n                                    <span className=\"uk-margin-small-right\" uk-icon=\"cart\"></span>\n                                    <span className=\"nav-name-text\">Ventas</span>\n                                </a>\n                            </li>\n                            <li className=\"uk-active nav-name-text\">\n                                <a className=\"uk-text-capitalize\" href=\"#\">\n                                    <span className=\"uk-margin-small-right\" uk-icon=\"folder\"></span>\n                                    <span className=\"nav-name-text\">Reportes</span>\n                                </a>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <span className=\"nav-name-text\">Menu</span>\n            </div>\n\n            <div className=\"uk-navbar-center\">\n                <img src=\"/images/cleanvel-logo.png\" width={280} alt=\"logo\" uk-img=\"true\" />\n            </div>\n\n            <div className=\"uk-navbar-right\">\n                <ul className=\"uk-navbar-nav\">\n                    <li>\n                        <a className=\"uk-text-capitalize\" href=\"#\">\n                            <span className=\"nav-name-text\">{user.user.name} </span>\n                            <span className=\"uk-margin-small-left\" uk-icon=\"user\"></span>\n                        </a>\n                    </li>\n                    <li>\n                        <a className=\"uk-text-capitalize\" href=\"/\" onClick={handleLogout}>\n                            <span className=\"nav-name-text\">Salir</span>\n                            <span class=\"uk-margin-small-left\" uk-icon=\"sign-out\"></span>\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    )\n};\n\nexport default Navbar;\n\n\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport AuthForm from \"./authForm\";\nimport Navbar from \"./navbar\";\n\nconst Home = () => {\n    const user = useSelector(state => state.user.data);\n\n    return (\n        <div className=\"home\">\n            {!user && <AuthForm />}\n            {user && <Navbar user={user} />}\n        </div>\n    )\n};\n\nexport default Home;","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Home from \"./components/home/home\";\n\n\nconst Routes = () => (\n    <Switch>\n        <Route exact path=\"/\" component={Home} />\n    </Switch>\n);\n\nexport default Routes;","import React from 'react';\nimport './App.css';\nimport Routes from './Routes';\n\n\nfunction App() {\n  return (\n    <div>\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\"\nimport user from \"./UserDuck\";\n\nexport const rootReducer = combineReducers({\n    user,\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; \n\nconst store = createStore(\n    rootReducer, \n    composeEnhancers(applyMiddleware(thunk)),\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport UIkit from \"uikit\";\nimport \"uikit/dist/css/uikit.min.css\";\nimport Icons from \"uikit/dist/js/uikit-icons\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nUIkit.use(Icons);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}